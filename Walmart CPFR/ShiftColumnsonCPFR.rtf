{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red77\green80\blue85;\red246\green247\blue249;\red46\green49\blue51;
\red20\green67\blue174;\red24\green25\blue27;\red186\green6\blue115;\red18\green115\blue126;\red162\green0\blue16;
}
{\*\expandedcolortbl;;\cssrgb\c37255\c38824\c40784;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c9412\c35294\c73725;\cssrgb\c12549\c12941\c14118;\cssrgb\c78824\c15294\c52549;\cssrgb\c3529\c52157\c56863;\cssrgb\c70196\c7843\c7059;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Script Summary:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // This script shifts cell contents to the left by one column in rows where specific text strings are found.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // It's designed to work on the active sheet of a Google Spreadsheet.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // The script processes multiple search strings and handles each row where these strings are found.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 sheet\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf6 \strokec6 getActiveSheet\cf4 \strokec4 ();\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // Function to find the target column where the text "Shift" is found starting from row 2\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 findTargetCol\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 startRow\cf4 \strokec4  = \cf8 \strokec8 2\cf4 \strokec4 ;  \cf2 \strokec2 // Start searching from row 2\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 range\cf4 \strokec4  = \cf6 \strokec6 sheet\cf4 \strokec4 .\cf6 \strokec6 getRange\cf4 \strokec4 (\cf6 \strokec6 startRow\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf6 \strokec6 sheet\cf4 \strokec4 .\cf6 \strokec6 getLastColumn\cf4 \strokec4 ());\cb1 \
\cb3   \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 values\cf4 \strokec4  = \cf6 \strokec6 range\cf4 \strokec4 .\cf6 \strokec6 getValues\cf4 \strokec4 ()[\cf8 \strokec8 0\cf4 \strokec4 ]; \cf2 \strokec2 // Get the first (and only) row of values\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 colToShift\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 values\cf4 \strokec4 .\cf6 \strokec6 forEach\cf4 \strokec4 ((\cf6 \strokec6 value\cf4 \strokec4 , \cf6 \strokec6 index\cf4 \strokec4 ) => \{\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf6 \strokec6 value\cf4 \strokec4  === \cf9 \strokec9 "Shift"\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf6 \strokec6 colToShift\cf4 \strokec4  = \cf6 \strokec6 index\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ; \cf2 \strokec2 // +1 because array indexes start at 0, but spreadsheet columns start at 1\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \});\cb1 \
\
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf6 \strokec6 colToShift\cf4 \strokec4  || \cf5 \strokec5 null\cf4 \strokec4 ; \cf2 \strokec2 // Return the found column or null if not found\cf4 \cb1 \strokec4 \
\cb3 \}\cb1 \
\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // Function to process shifting for multiple search texts\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 _shiftAll\cf4 \strokec4 (\cf6 \strokec6 searchTexts\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 // Ensure searchTexts is an array\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf7 \strokec7 Array\cf4 \strokec4 .\cf6 \strokec6 isArray\cf4 \strokec4 (\cf6 \strokec6 searchTexts\cf4 \strokec4 )) \{\cb1 \
\cb3     \cf6 \strokec6 searchTexts\cf4 \strokec4  = [\cf6 \strokec6 searchTexts\cf4 \strokec4 ];\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf7 \strokec7 Logger\cf4 \strokec4 .\cf6 \strokec6 log\cf4 \strokec4 (\cf9 \strokec9 "Search texts: "\cf4 \strokec4  + \cf6 \strokec6 searchTexts\cf4 \strokec4 .\cf6 \strokec6 join\cf4 \strokec4 (\cf9 \strokec9 ", "\cf4 \strokec4 ));\cb1 \
\
\cb3   \cf6 \strokec6 searchTexts\cf4 \strokec4 .\cf6 \strokec6 forEach\cf4 \strokec4 (\cf6 \strokec6 searchTxt\cf4 \strokec4  => \{\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 tf\cf4 \strokec4  = \cf6 \strokec6 sheet\cf4 \strokec4 .\cf6 \strokec6 createTextFinder\cf4 \strokec4 (\cf6 \strokec6 searchTxt\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 cellsFound\cf4 \strokec4  = \cf6 \strokec6 tf\cf4 \strokec4 .\cf6 \strokec6 findAll\cf4 \strokec4 ();\cb1 \
\cb3     \cf7 \strokec7 Logger\cf4 \strokec4 .\cf6 \strokec6 log\cf4 \strokec4 (\cf9 \strokec9 "Found "\cf4 \strokec4  + \cf6 \strokec6 cellsFound\cf4 \strokec4 .\cf6 \strokec6 length\cf4 \strokec4  + \cf9 \strokec9 " cells with text: "\cf4 \strokec4  + \cf6 \strokec6 searchTxt\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 rowsToProcess\cf4 \strokec4  = \cf6 \strokec6 cellsFound\cf4 \strokec4 .\cf6 \strokec6 filter\cf4 \strokec4 (\cf6 \strokec6 v\cf4 \strokec4  => \cf6 \strokec6 v\cf4 \strokec4 .\cf6 \strokec6 getValue\cf4 \strokec4 () == \cf6 \strokec6 searchTxt\cf4 \strokec4 ).\cf6 \strokec6 map\cf4 \strokec4 (\cf6 \strokec6 v\cf4 \strokec4  => \cf6 \strokec6 v\cf4 \strokec4 .\cf6 \strokec6 getRow\cf4 \strokec4 ());\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf6 \strokec6 rowsToProcess\cf4 \strokec4 .\cf6 \strokec6 length\cf4 \strokec4  == \cf8 \strokec8 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf7 \strokec7 Logger\cf4 \strokec4 .\cf6 \strokec6 log\cf4 \strokec4 (\cf9 \strokec9 "No rows found with the text: "\cf4 \strokec4  + \cf6 \strokec6 searchTxt\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 col\cf4 \strokec4  = \cf6 \strokec6 findTargetCol\cf4 \strokec4 ();\cb1 \
\cb3     \cf6 \strokec6 rowsToProcess\cf4 \strokec4 .\cf6 \strokec6 forEach\cf4 \strokec4 ((\cf6 \strokec6 row\cf4 \strokec4 , \cf6 \strokec6 i\cf4 \strokec4 ) => \{\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf6 \strokec6 i\cf4 \strokec4  > \cf8 \strokec8 0\cf4 \strokec4  && \cf6 \strokec6 row\cf4 \strokec4  == \cf6 \strokec6 rowsToProcess\cf4 \strokec4 [\cf6 \strokec6 i\cf4 \strokec4  - \cf8 \strokec8 1\cf4 \strokec4 ]) \cf5 \strokec5 return\cf4 \strokec4 ; \cf2 \strokec2 // Skip duplicate rows\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 shiftLeftByOne\cf4 \strokec4 (\cf6 \strokec6 row\cf4 \strokec4 , \cf6 \strokec6 col\cf4 \strokec4 );\cb1 \
\cb3     \});\cb1 \
\cb3   \});\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // Function to initiate the shift process for multiple texts\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 shiftAll\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 _shiftAll\cf4 \strokec4 ([\cf9 \strokec9 "Sellin FC (Uncon.)"\cf4 \strokec4 , \cf9 \strokec9 "Sellin FC (Con.)"\cf4 \strokec4 , \cf9 \strokec9 "Seasonality index"\cf4 \strokec4 ]);\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // Function to shift cells left by one column\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 shiftLeftByOne\cf4 \strokec4 (\cf6 \strokec6 row\cf4 \strokec4 , \cf6 \strokec6 col\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 range\cf4 \strokec4  = \cf6 \strokec6 sheet\cf4 \strokec4 .\cf6 \strokec6 getRange\cf4 \strokec4 (\cf6 \strokec6 row\cf4 \strokec4 , \cf6 \strokec6 col\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf6 \strokec6 sheet\cf4 \strokec4 .\cf6 \strokec6 getLastColumn\cf4 \strokec4 () - \cf6 \strokec6 col\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 var\cf4 \strokec4  \cf6 \strokec6 dst\cf4 \strokec4  = \cf6 \strokec6 sheet\cf4 \strokec4 .\cf6 \strokec6 getRange\cf4 \strokec4 (\cf6 \strokec6 row\cf4 \strokec4 , \cf6 \strokec6 col\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf6 \strokec6 sheet\cf4 \strokec4 .\cf6 \strokec6 getLastColumn\cf4 \strokec4 () - \cf6 \strokec6 col\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 range\cf4 \strokec4 .\cf6 \strokec6 copyTo\cf4 \strokec4 (\cf6 \strokec6 dst\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // Run the script\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 run\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 shiftAll\cf4 \strokec4 ();\cb1 \
\cb3 \}\cb1 \
\
}